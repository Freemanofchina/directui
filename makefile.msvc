# nmake -f makefile.msvc
# Arguments:
# CFG=dbg|rel (default: dbg)
# UIL=<directory where DirectuUI UIlib files are>

# Set default configuration
!if "$(CFG)"==""
CFG=dbg
!endif

!if "$(UIL)"==""
UIL=UIlib
!endif

# O is directory where binary files go
O = $(CFG)
# OUI is where UIlib object and other temp files go
OUI = $(O)\uilib
# OTA is where TestApp object and other temp files go
OTA = $(O)\testapp

CC = cl.exe

CFLAGS = $(CFLAGS) /nologo /c
# standard windows defines
CFLAGS = $(CFLAGS) /D "WIN32"  /D "_WIN32"

# suppress warning C4996: 'function': was declared deprecated
# suppress warning C4244: argument' : conversion from 'int' to 'float', possible loss of data
#    (WDL is full of those)
#CFLAGS = $(CFLAGS) /wd4996 /wd4244

# /W3  : bump warnings level from 1 to 3
# /WX  : treat warnings as errors
# /GR- : disable RTTI
# /Zi  : enable debug information
# /GS  : enable security checks
# /Gy  : separate functions for linker
CFLAGS = $(CFLAGS) /W3 /WX /GR- /Zi /GS /Gy

!if "$(CFG)"=="rel"
# /Os  : favor code space
# /Ox  : maximum optimizations
# /GL  : enable link-time code generation
CFLAGS = $(CFLAGS) /Os /Ox /GL /D "NDEBUG"
LDFLAGS = $(LDFLAGS) /LTCG
# /DYNAMICBASE and /NXCOMPAT for better protection against stack overflows
# http://blogs.msdn.com/vcblog/archive/2009/05/21/dynamicbase-and-nxcompat.aspx
LDFLAGS = $(LDFLAGS) /NXCOMPAT /DYNAMICBASE /FIXED:NO
# /EHs-c : disable C++ exception handler
CFLAGS = $(CFLAGS) /EHs-c- 
!else
# /Od   : disable optimizations
# /RTCs : stack frame runtime checking
# /RTCu : ununitialized local usage checks
CFLAGS = $(CFLAGS) /Od /RTCs /RTCu
# exception handling must be activated to enable memory leak detection
# /MDd  : link with msvcrtd.lib
# /EHsc : enable C++ EH (no SEH exceptions)
CFLAGS = $(CFLAGS) /MDd /EHsc /D "DEBUG" /D "_DEBUG"
!endif

WINVER_DEFS =  /D "WINVER=0x0501" /D "_WIN32_WINNT=0x0501"

CFLAGS = $(CFLAGS) $(WINVER_DEFS) /I$(UIL) /D "UILIB_API="

#CFLAGS = $(CFLAGS) /D"UNICODE" /D"_UNICODE"

CFLAGS_TA = $(CFLAGS) /IApp

LIBS = $(LIBS) kernel32.lib user32.lib gdi32.lib advapi32.lib comdlg32.lib \
	comctl32.lib shell32.lib gdiplus.lib ole32.lib ws2_32.lib wininet.lib winmm.lib

LD = link.exe
LDFLAGS = $(LDFLAGS) /nologo /DEBUG /opt:ref /opt:icf /machine:x86
LDFLAGS = $(LDFLAGS) /SUBSYSTEM:WINDOWS

TA_RES = $(OTA)TestApp.res
TA_MANIFEST = $(OTA)\TestApp.manifest.res
TA_APP = $(O)\TestApp.exe

UIL_OBJS = $(OUI)\UIActiveX.obj $(OUI)\UIAnim.obj $(OUI)\UIBase.obj \
	$(OUI)\UIBlue.obj $(OUI)\UIButton.obj $(OUI)\UICombo.obj \
	$(OUI)\UIContainer.obj $(OUI)\UIDecoration.obj \
	$(OUI)\UIDlgBuilder.obj $(OUI)\UIEdit.obj $(OUI)\UILabel.obj \
	$(OUI)\UIList.obj $(OUI)\UIManager.obj $(OUI)\UIMarkup.obj \
	$(OUI)\UIPanel.obj $(OUI)\UITab.obj $(OUI)\UITool.obj $(OUI)\UIlib.obj

#PANDORA_OBJS = $(O)\crypt.obj $(O)\ezxml.obj $(O)\xml.obj $(O)\piano.obj

TA_OBJS = $(UIL_OBJS) $(OTA)\App.obj $(OTA)\Views.obj $(TA_RES)

# Don't embed a manifest into binary in Debug builds. That disables external manifest
# (i.e. the .manifest file) generated by a linker. Unfortunately that manifest includes
# necessary incantations to load debug msvcrt dll which I'm not sure I can hard-code
# (since it might depend on the compiler used).
# TODO: figure out how to create proper embedded manifest for debug builds as well 
!if "$(CFG)"=="rel"
TA_OBJS = $(TA_OBJS) $(TA_MANIFEST)
!endif

all: $(O) $(TA_APP)

clean: force
	rmdir /S /Q $(O)

rebuild: clean all

$(O): force
	@if not exist $(O) mkdir $(O)
	@if not exist $(OUI) mkdir $(OUI)
	@if not exist $(OTA) mkdir $(OTA)

$(TA_RES): App\DirectUI.rc
	rc /r /fo$(TA_RES) App\DirectUI.rc

$(TA_MANIFEST): App\App.manifest.rc
	rc /r /fo$(TA_MANIFEST)  App\App.manifest.rc

$(TA_APP): $(TA_OBJS)
	$(LD) $(LDFLAGS) $** $(LIBS) /PDB:$*.pdb /OUT:$@ 

{UIlib\}.cpp{$(OUI)}.obj::
	$(CC) /TP $(CFLAGS) /Fo$(OUI)\ /Fd$(O)\vc80.pdb $<

{App\}.cpp{$(OTA)}.obj::
	$(CC) /TP $(CFLAGS_TA) /Fo$(OTA)\ /Fd$(O)\vc80.pdb $<

#{src\pandora}.c{$(O)}.obj::
#	$(CC) /TC $(CFLAGS) /Fo$(O)\ /Fd$(O)\vc80.pdb $<

force: ;
